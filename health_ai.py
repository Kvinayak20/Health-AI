# -*- coding: utf-8 -*-
"""Health_AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C0TfuAFhN6qa26GbhCYyVRwCsA1HatGS
"""

pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# -----------------------------
# Load model and tokenizer
# -----------------------------
model_name = "gpt2"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name)
model.eval()

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# -----------------------------
# In-memory user database
# -----------------------------
user_db = {}

# -----------------------------
# Core response generation
# -----------------------------
def generate_response(prompt, max_length=300):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return str(response)

# -----------------------------
# Scenarios
# -----------------------------
def disease_prediction(symptoms):
    prompt = f"Symptoms: {symptoms}\nPossible conditions and suggestions:"
    return generate_response(prompt)

def treatment_plan(condition, age, gender, medical_history):
    prompt = f"Condition: {condition}\nAge: {age}\nGender: {gender}\nHistory: {medical_history}\nTreatment Plan:"
    return generate_response(prompt)

def diet_nutrition(age, gender, condition, goal):
    prompt = f"Age: {age}\nGender: {gender}\nCondition: {condition}\nGoal: {goal}\nSuggested Diet & Nutrition Plan:"
    return generate_response(prompt)

def medication_reminder(name, dose, time):
    prompt = f"Medication: {name}\nDose: {dose}\nTime: {time}\nReminder message:"
    return generate_response(prompt)

# -----------------------------
# User system
# -----------------------------
def register_user(name, age, username, password):
    if username in user_db:
        return "‚ùå Username already exists."
    user_db[username] = {"name": name, "age": age, "password": password}
    return "‚úÖ Registration successful!"

def validate_login(username, password):
    user = user_db.get(username)
    return user is not None and user["password"] == password

# -----------------------------
# Theme CSS
# -----------------------------
light_css = """
.sidebar {background-color: #1E3A8A; color: white; padding: 20px; height: 100vh;}
.sidebar label, .sidebar span {color: white !important;}
.sidebar input[type=radio] {accent-color: #93C5FD;}
body {background-color: white; color: black;}
"""

dark_css = """
.sidebar {background-color: #1E3A8A; color: white; padding: 20px; height: 100vh;}
.sidebar label, .sidebar span {color: white !important;}
.sidebar input[type=radio] {accent-color: #93C5FD;}
body {background-color: #111827; color: white;}
"""

# -----------------------------
# Gradio App
# -----------------------------
with gr.Blocks(css=light_css) as app:

    login_state = gr.State(False)
    css_box = gr.HTML("")  # Placeholder to update CSS dynamically

    # -------------------------
    # Login/Register UI
    # -------------------------
    with gr.Group(visible=True) as login_ui:
        gr.Markdown("## üîê Login or Register")

        with gr.Tab("Login"):
            username_login = gr.Textbox(label="Username")
            password_login = gr.Textbox(label="Password", type="password")
            login_btn = gr.Button("Login")
            login_status = gr.Textbox(label="Status", interactive=False)

        with gr.Tab("Register"):
            name_reg = gr.Textbox(label="Full Name")
            age_reg = gr.Number(label="Age")
            username_reg = gr.Textbox(label="Username")
            password_reg = gr.Textbox(label="Password", type="password")
            register_btn = gr.Button("Register")
            register_status = gr.Textbox(label="Registration Status", interactive=False)

    # -------------------------
    # Main App
    # -------------------------
    with gr.Group(visible=False) as main_ui:
        gr.Markdown("## üß† Medical AI Assistant")
        gr.Markdown("*Disclaimer: Informational purposes only. Consult healthcare professionals.*")

        with gr.Row():
            # Sidebar
            with gr.Column(scale=1, elem_classes="sidebar"):
                gr.Markdown("### üìå Tools")

                nav = gr.Radio(
                    choices=["Disease Prediction", "Treatment Plans", "Diet & Nutrition Advice", "Medication Reminder"],
                    label="Navigation",
                    value="Disease Prediction"
                )

                theme_toggle = gr.Radio(
                    choices=["Light Mode", "Dark Mode"],
                    value="Light Mode",
                    label="Theme"
                )

            # Content Area
            with gr.Column(scale=4):
                disease_ui = gr.Group(visible=True)
                treatment_ui = gr.Group(visible=False)
                diet_ui = gr.Group(visible=False)
                reminder_ui = gr.Group(visible=False)

                # ---------------------
                # Disease Prediction
                # ---------------------
                with disease_ui:
                    symptoms_input = gr.Textbox(label="Enter Symptoms", lines=4)
                    predict_btn = gr.Button("Analyze Symptoms")
                    prediction_output = gr.Textbox(label="Results", lines=10)
                    predict_btn.click(disease_prediction, inputs=symptoms_input, outputs=prediction_output)

                # ---------------------
                # Treatment Plans
                # ---------------------
                with treatment_ui:
                    condition_input = gr.Textbox(label="Condition")
                    age_input = gr.Number(label="Age")
                    gender_input = gr.Dropdown(["Male", "Female", "Other"], label="Gender")
                    history_input = gr.Textbox(label="Medical History", lines=3)
                    plan_btn = gr.Button("Generate Plan")
                    plan_output = gr.Textbox(label="Treatment Plan", lines=10)
                    plan_btn.click(
                        treatment_plan,
                        inputs=[condition_input, age_input, gender_input, history_input],
                        outputs=plan_output
                    )

                # ---------------------
                # Diet & Nutrition Advice
                # ---------------------
                with diet_ui:
                    age_diet = gr.Number(label="Age")
                    gender_diet = gr.Dropdown(["Male", "Female", "Other"], label="Gender")
                    condition_diet = gr.Textbox(label="Health Condition (if any)")
                    goal_diet = gr.Textbox(label="Health Goal (e.g., weight loss, muscle gain, diabetes management)")
                    diet_btn = gr.Button("Get Diet Plan")
                    diet_output = gr.Textbox(label="Diet & Nutrition Plan", lines=10)
                    diet_btn.click(
                        diet_nutrition,
                        inputs=[age_diet, gender_diet, condition_diet, goal_diet],
                        outputs=diet_output
                    )

                # ---------------------
                # Medication Reminder
                # ---------------------
                with reminder_ui:
                    med_name = gr.Textbox(label="Medication Name")
                    dosage = gr.Textbox(label="Dosage")
                    timing = gr.Textbox(label="Reminder Time")
                    reminder_btn = gr.Button("Generate Reminder")
                    reminder_output = gr.Textbox(label="Reminder Message", lines=5)
                    reminder_btn.click(
                        medication_reminder,
                        inputs=[med_name, dosage, timing],
                        outputs=reminder_output
                    )

                # ---------------------
                # Switch Tabs
                # ---------------------
                def show_tab(choice):
                    return (
                        gr.update(visible=choice == "Disease Prediction"),
                        gr.update(visible=choice == "Treatment Plans"),
                        gr.update(visible=choice == "Diet & Nutrition Advice"),
                        gr.update(visible=choice == "Medication Reminder")
                    )

                nav.change(show_tab, inputs=nav, outputs=[disease_ui, treatment_ui, diet_ui, reminder_ui])

                # ---------------------
                # Theme Toggle
                # ---------------------
                def switch_theme(mode):
                    if mode == "Dark Mode":
                        return gr.update(value=f"<style>{dark_css}</style>")
                    else:
                        return gr.update(value=f"<style>{light_css}</style>")

                theme_toggle.change(switch_theme, inputs=theme_toggle, outputs=[css_box])

    # -------------------------
    # Login/Register functions
    # -------------------------
    def try_login(u, p):
        if validate_login(u, p):
            return True, "", gr.update(visible=False), gr.update(visible=True)
        else:
            return False, "‚ùå Invalid credentials.", gr.update(), gr.update()

    def try_register(name, age, username, password):
        return register_user(name, age, username, password)

    login_btn.click(
        try_login,
        inputs=[username_login, password_login],
        outputs=[login_state, login_status, login_ui, main_ui]
    )

    register_btn.click(
        try_register,
        inputs=[name_reg, age_reg, username_reg, password_reg],
        outputs=[register_status]
    )

# -----------------------------
# Launch app
# -----------------------------
app.launch()